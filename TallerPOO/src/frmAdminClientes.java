
import com.mysql.jdbc.Connection;
import com.mysql.jdbc.Statement;
import java.sql.DriverManager;
import java.sql.ResultSet;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author niwde
 */
public class frmAdminClientes extends javax.swing.JFrame {

    //nuevo atributo para conservar las cedulas que se van a actualizar
    String cedula;
    
    //nuevos atributos del formulario
    Connection miConexion;
    Statement consultaSQL;
    //variables para los detalles de la DB    
    String url = "jdbc:mysql://localhost/sistemaBancario";
    String user = "root";
    String password = "";

    /**
     * Creates new form frmAdminClientes
     */
    public frmAdminClientes() {
        initComponents();
        actualizarTabla();
    }

    public void actualizarTabla() {
        try {//intentar ejecutar una orden
            //Instanciar conexion a la base de datos
            miConexion = (Connection) DriverManager.getConnection(url, user, password);
            System.out.println("Conexión realizada con exito!!!! Estamos dentro de la base de datos!!!!");

            ArrayList<CuentaBancaria> listadoDeBaseDeDatos = new ArrayList<>();
            String sql = "Select * from cuentaBancaria";

            consultaSQL = (Statement) miConexion.createStatement();
            ResultSet daticos = consultaSQL.executeQuery(sql);
            //recorrer fila por fila, hasta que no existan mas datos
            while (daticos.next()) {
                CuentaBancaria filadeDatos;
                filadeDatos = new CuentaBancaria(
                        daticos.getString("nombre"),
                        daticos.getString("cedula"),
                        daticos.getDouble("SaldoCuentaAhorros"),
                        daticos.getDouble("SaldoCuentaCorriente"),
                        daticos.getDouble("SaldoCDT")
                );
                listadoDeBaseDeDatos.add(filadeDatos);
            }

            //trasladar la información del objeto interno: listadoDeBaseDeDatos
            // al objeto gráfico: tabla - tblDatos
            //guardar en arreglo con número de columnas
            //igual a las columnas de la tabla de BD.
            Object[] temporal = new Object[5];

            //tomar control de la tabla en la interfaz gráfica
            DefaultTableModel modeloTabla = (DefaultTableModel) tblDatos.getModel();
            modeloTabla.setRowCount(0);
            //recorrer la lista de datos
            for (int i = 0; i < listadoDeBaseDeDatos.size(); i++) {
                temporal[0] = listadoDeBaseDeDatos.get(i).getCedula();
                temporal[1] = listadoDeBaseDeDatos.get(i).getNombre();
                temporal[2] = listadoDeBaseDeDatos.get(i).getSaldoAhorros();
                temporal[3] = listadoDeBaseDeDatos.get(i).getSaldoCorriente();
                temporal[4] = listadoDeBaseDeDatos.get(i).getCDT();
                modeloTabla.addRow(temporal);
            }

        } catch (SQLException ex) {//Mostar un mensaje si no se puede realizar
            //la orden dentro del try
            System.out.println("Error de conexión a la base de datos");
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        txtCedula = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        btnCrear = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnActualizar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDatos = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jLabel1.setText("Cedula");

        jLabel2.setText("Nombre");

        txtNombre.setEnabled(false);

        txtCedula.setEnabled(false);

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel3.setText("Gestión de clientes BancoX");

        btnCrear.setText("Crear cliente");
        btnCrear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCrearActionPerformed(evt);
            }
        });

        btnEliminar.setText("Eliminar cliente");
        btnEliminar.setEnabled(false);
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnActualizar.setText("Actualizar cliente");
        btnActualizar.setEnabled(false);
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });

        tblDatos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cedula", "Nombre", "Saldo Ahorros", "Saldo Corriente", "Saldo CDT"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblDatos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDatosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblDatos);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtCedula, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnCrear)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEliminar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnActualizar)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(25, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtCedula, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCrear)
                    .addComponent(btnEliminar)
                    .addComponent(btnActualizar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 25, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCrearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCrearActionPerformed
        // TODO add your handling code here:
        //Habilitar los cuadros de texto
        txtCedula.setEnabled(true);
        txtNombre.setEnabled(true);

        if (txtCedula.getText().isEmpty() || txtNombre.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Falta diligenciar datos");
        } else {
            try {
                //instanciar el objeto
                //para ejecutar
                //las consultas
                consultaSQL = (Statement) miConexion.createStatement();
                //crear un objeto de la cuentaBancaria
                CuentaBancaria banpolombia = new CuentaBancaria(txtNombre.getText(), txtCedula.getText());
                //Guardar el texto de la consulta en un String
                String sql = "INSERT INTO cuentabancaria VALUES ('"
                        + banpolombia.getNombre() + "','"
                        + banpolombia.getCedula() + "',"
                        + banpolombia.getSaldoAhorros() + ","
                        + banpolombia.getSaldoCorriente() + ","
                        + banpolombia.getCDT() + ");";
                //System.out.println(sql);

                //ejecutar la consulta                
                consultaSQL.executeUpdate(sql);
                //mostrar un mensaje confirmando que se ha guardado la info
                JOptionPane.showMessageDialog(this, "Dato guardado corretamente");
                limpiarDatos();                
                actualizarTabla();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Error interno, consulta al administrador");
            }
        }


    }//GEN-LAST:event_btnCrearActionPerformed

    private void tblDatosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDatosMouseClicked
        // TODO add your handling code here:
        int i = tblDatos.getSelectedRow();
        //ver la fila seleccionada por el usuario
        //JOptionPane.showMessageDialog(this, i);
        DefaultTableModel datos = (DefaultTableModel) tblDatos.getModel();
        //llevar la información de la tabla a los cuadros de texto
        txtCedula.setText((String) datos.getValueAt(i, 0));
        //guardar la cedula en el atributo de la clase
        cedula = (String) datos.getValueAt(i, 0);
        txtNombre.setText(datos.getValueAt(i, 1).toString());
        //Habilitar botones
        btnActualizar.setEnabled(true);
        btnEliminar.setEnabled(true);
        //deshabilitar el botón crear
        btnCrear.setEnabled(false);
        //Habilitar los cuadros de texto
        txtCedula.setEnabled(true);
        txtNombre.setEnabled(true);

    }//GEN-LAST:event_tblDatosMouseClicked

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        int resp = JOptionPane.showConfirmDialog(this, "¿Esta seguro que desea borrar el dato?");

        if (resp == 0) {

            String sql = "delete from cuentaBancaria where cedula = '"
                    + txtCedula.getText()
                    + "'";
            System.out.println(sql);

            try {
                // TODO add your handling code here:
                consultaSQL = (Statement) miConexion.createStatement();
                consultaSQL.executeUpdate(sql);
                JOptionPane.showMessageDialog(this, "Cliente borrado correctamente");
                actualizarTabla();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Error interno, contacte al administrador");
            }
            limpiarDatos();
        } else if (resp == 2) {
            limpiarDatos();
        }

    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
        // TODO add your handling code here:
        int resp = JOptionPane.showConfirmDialog(this, "¿Esta seguro que desea actualizar el dato?");

        if (resp == 0) {

            String sql = "update cuentaBancaria set cedula='"
                    + txtCedula.getText() 
                        + "',nombre ='"
                    + txtNombre.getText()
                    + "' where cedula = '"
                    + cedula
                    + "'";
            //System.out.println(sql);

            try {
                // TODO add your handling code here:
                consultaSQL = (Statement) miConexion.createStatement();
                consultaSQL.executeUpdate(sql);
                JOptionPane.showMessageDialog(this, "Cliente borrado correctamente");
                actualizarTabla();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Error interno, contacte al administrador");
            }
            limpiarDatos();
        } else if (resp == 2) {
            limpiarDatos();
        }
        
    }//GEN-LAST:event_btnActualizarActionPerformed

    public void limpiarDatos() {//Borron y cuenta nueva
        txtCedula.setText("");
        txtNombre.setText("");
        txtCedula.setEnabled(false);
        txtNombre.setEnabled(false);
        btnActualizar.setEnabled(false);
        btnEliminar.setEnabled(false);
        btnCrear.setEnabled(true);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmAdminClientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmAdminClientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmAdminClientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmAdminClientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmAdminClientes().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnCrear;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblDatos;
    private javax.swing.JTextField txtCedula;
    private javax.swing.JTextField txtNombre;
    // End of variables declaration//GEN-END:variables
}
